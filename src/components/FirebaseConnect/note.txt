<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/7.6.1/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries -->
<script src="https://www.gstatic.com/firebasejs/7.6.1/firebase-analytics.js"></script>

<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyAgqIxy6c8k-DXp-32qM6lNSb2XN59cFkM",
    authDomain: "ambient-future-198109.firebaseapp.com",
    databaseURL: "https://ambient-future-198109.firebaseio.com",
    projectId: "ambient-future-198109",
    storageBucket: "ambient-future-198109.appspot.com",
    messagingSenderId: "269591731211",
    appId: "1:269591731211:web:a597fbe0ec3f8451f53b0e",
    measurementId: "G-6ERLFVKCXT"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>

// FETCHING databaseURL// get the whole collection
db.collection("cities")
.get()
.then(querySnapshot => {
  const data = querySnapshot.docs.map(doc => doc.data());
  console.log(data); // array of cities objects
});

// or get the single doc from the collection
db.collection("cities")
.doc('LA')
.get()
.then(doc => {
  const data = doc.data();
  console.log(data); // LA city object with key-value pair
});

// or get all docs matching the query
db.collection("cities")
.where("country", "==", "USA")
.get()
.then(querySnapshot => {
  const data = querySnapshot.docs.map(doc => doc.data());
  console.log(data); // array of cities objects
});


----------------------------


import React, { useState, useEffect } from 'react'
import { db } from './FirebaseConfig'

export default function FirebaseConnect() {  

  const [counters, setCounters] = useState(0)
  //const [dates, setDates] = useState(null)
  const [collections, setcollections] = useState(null)
  const [collection, setcollection] = useState('mydates')

  const handleAddCounter = () => {
    db.collection("mycounter").doc("counter").set({
      mycounter: counters + 1,
    })
    .then(function() {
        console.log("Counter successfully written!");
        setCounters(ps => ps + 1)
    })
    .catch(function(error) {
        console.error("Error writing document: ", error);
    });
  }

  const getCollection = (cl) => {
    setcollection(cl)
  }

  const getCollections = (collection) => {
    db.collection(collection)
    .get()
    .then(querySnapshot => {
      const data = querySnapshot.docs.map(doc => doc.data());
      setcollections(data)
    })
    .catch(function(error) {
      console.error("Error get collection: ", error);
    });
  }

  useEffect(() => {
    getCollections(collection)
  },[collection])
  
  console.log("-- :", collection)

  return (
    <>
      <button onClick={() => handleAddCounter()}>Add Counter</button>
      <hr />
      <button onClick={() => getCollection('mycounter')}>Get Counter</button>
      <p />
      <button onClick={() => getCollection('mydates')}>Get Date</button>
      <p />
      <button onClick={() => getCollection('users')}>Get Users</button>
      <hr />
      <pre>
      { 
        collections === null ? 'Loading...' : JSON.stringify(counters, null, 2) 
      }
      </pre>
    </>
  )
}

// const handleAddDate = () => {
//   db.collection("mydates").doc("dates").set({
//     mydatevalue: dates,
//   })
//   .then(function() {
//       console.log("Date successfully written!");
//   })
//   .catch(function(error) {
//       console.error("Error writing document: ", error);
//   });
// }

// const handleAddCounter = () => {
//   db.collection("mycounter").doc("counter").set({
//     mycounter: counters,
//   })
//   .then(function() {
//       console.log("Date successfully written!");
//   })
//   .catch(function(error) {
//       console.error("Error writing document: ", error);
//   });
// }

----------------

let t = 0
  const addCounter = (n) => {
    t += n
    return t
  }
